package main
import "fmt"
import "math/rand"
import "time"


//Pseudo-random number generators work by performing some operation on a value. Generally this value is the previous number generated by the generator. However, the first time you use the generator, there is no previous value.
//Seeding a pseudo-random number generator gives it its first "previous" value. Each seed value will correspond to a sequence of generated values for a given random number generator. That is, if you provide the same seed twice, you get the same sequence of numbers twice.
//Generally, you want to seed your random number generator with some value that will change each execution of the program. For instance, the current time is a frequently-used seed. The reason why this doesn't happen automatically is so that if you want, you can provide a specific seed to get a known sequence of numbers.

func main(){
	fmt.Println("Switch case in  golang")
	rand.Seed(time.Now().UnixNano())
	diceNumber := rand.Intn(6)+1
	fmt.Println("Value of dice is", diceNumber)

	switch diceNumber{
	case 1:
		fmt.Printf("you can move %v spots",diceNumber)
	case 2:
		fmt.Printf("you can move %v spots",diceNumber)
	case 3:
		fmt.Printf("you can move %v spots",diceNumber)
	case 4:
		fmt.Printf("you can move %v spots",diceNumber)
	case 5:
		fmt.Printf("you can move %v spots",diceNumber)
		fallthrough //fallthrough execute the nexxt statement too
	case 6:
		fmt.Printf("you can move %v spots and roll the dice again",diceNumber)
	default:
		fmt.Println("What was thatss")		
	}
}